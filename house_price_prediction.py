# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISHVAx-6f1yPfr7eR0F3IiyzpD18cU2H

Libraries
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

"""Load datasets"""

train_df = pd.read_csv('train.csv')
test_df = pd.read_csv('test.csv')

"""# Data Preprocessing

Combine train and test for consistent preprocessing
"""

combined = pd.concat([train_df, test_df], ignore_index=True)

"""Encode categorical features"""

label_enc = LabelEncoder()
combined['POSTED_BY'] = label_enc.fit_transform(combined['POSTED_BY'])
combined['BHK_OR_RK'] = label_enc.fit_transform(combined['BHK_OR_RK'])

"""Extract city from address and encode"""

combined['CITY'] = combined['ADDRESS'].apply(lambda x: x.split(',')[-1] if ',' in x else x)
combined['CITY'] = label_enc.fit_transform(combined['CITY'])

"""Drop unnecessary columns"""

combined.drop(['ADDRESS'], axis=1, inplace=True)

"""Split back into train and test"""

train = combined[~combined['TARGET(PRICE_IN_LACS)'].isna()]
test = combined[combined['TARGET(PRICE_IN_LACS)'].isna()].drop('TARGET(PRICE_IN_LACS)', axis=1)

"""Features and target"""

X = train.drop('TARGET(PRICE_IN_LACS)', axis=1)
y = train['TARGET(PRICE_IN_LACS)']

"""Scale numerical features"""

scaler = StandardScaler()
numerical_cols = ['SQUARE_FT', 'LONGITUDE', 'LATITUDE', 'BHK_NO.']
X[numerical_cols] = scaler.fit_transform(X[numerical_cols])
test[numerical_cols] = scaler.transform(test[numerical_cols])

"""Train-test split for validation"""

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

"""Model: Random Forest Regressor"""

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""Predictions on validation set"""

y_pred = model.predict(X_val)

"""Evaluation"""

mse = mean_squared_error(y_val, y_pred)
r2 = r2_score(y_val, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'R2 Score: {r2:.2f}')

"""Plot feature importances"""

plt.figure(figsize=(10, 6))
importances = model.feature_importances_
features = X.columns
sns.barplot(x=importances, y=features)
plt.title('Feature Importances')
plt.xlabel('Importance')
plt.ylabel('Features')
plt.show()

"""Predict on test set"""

test_predictions = model.predict(test)

"""Save predictions"""

test['PREDICTED_PRICE_IN_LACS'] = test_predictions
test.to_csv('predictions.csv', index=False)
print("Predictions saved to 'predictions.csv'")
print(test.head())